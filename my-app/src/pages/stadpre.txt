import React, { useState } from 'react';
import { AnimatePresence, motion } from 'framer-motion';
import dayjs from 'dayjs';

import s1 from '../s1.jpg'; // Import stadium images
import s2 from '../s2.jpg';
import s3 from '../s3.jpg';

// List of stadiums with details
const stadiums = [
  { 
    name: 'Stadium A', 
    image: s1, 
    region: 'Tunis', 
    description: 'A state-of-the-art stadium located in the heart of Tunis. Perfect for football games and events.',
    capacity: '5000 seats', 
    features: ['LED Scoreboard', 'VIP Lounge', 'Free Parking']
  },
  { 
    name: 'Stadium B', 
    image: s2, 
    region: 'Sfax', 
    description: 'A modern stadium with great amenities, ideal for hosting tournaments and community events.',
    capacity: '4000 seats', 
    features: ['VIP Seats', 'Large LED Screens', 'Press Box']
  },
  { 
    name: 'Stadium C', 
    image: s3, 
    region: 'Nabeul', 
    description: 'A spacious stadium located by the coast, known for its excellent pitch quality and stunning views.',
    capacity: '3500 seats', 
    features: ['Beachfront View', 'Training Grounds', 'Locker Rooms']
  }
];

// Booked slots data
const allBookedSlots = {
  'Stadium A': {
    '2025-04-14': ['14:30', '17:30'],
    '2025-04-15': ['13:00'],
  },
  'Stadium B': {
    '2025-04-18': ['11:30'],
  },
  'Stadium C': {
    '2025-04-20': ['22:00'],
  },
};

// üîÅ Generate 1h30min intervals from 10:00 to 00:00
const generateTimeSlots = () => {
  const result = [];
  let current = dayjs().startOf('day').hour(10).minute(0);
  const endTime = dayjs().startOf('day').add(1, 'day'); // 00:00 next day

  while (current.isBefore(endTime)) {
    result.push(current.format('HH:mm'));
    current = current.add(90, 'minute');
  }

  return result;
};

const times = generateTimeSlots();

// üéØ Calendar component
const Calendar = ({ stadium }) => {
  const [weekOffset, setWeekOffset] = useState(0);

  const startOfWeek = dayjs().startOf('week').add(1, 'day').add(weekOffset, 'week');
  const currentWeekDates = Array.from({ length: 7 }, (_, i) => startOfWeek.add(i, 'day'));

  const handlePreviousWeek = () => setWeekOffset((prev) => prev - 1);
  const handleNextWeek = () => setWeekOffset((prev) => prev + 1);

  const bookedSlots = allBookedSlots[stadium] || {};

  const handleBooking = (dateStr, time) => {
    alert(`R√©servation : ${stadium} - ${dateStr} √† ${time}`);
    // Ici tu peux ajouter ta vraie logique de r√©servation
  };

  return (
    <div className="space-y-10 mt-10">
      {/* Week navigation */}
      <div className="flex items-center justify-between">
        <h2 className="text-3xl font-extrabold text-red-400">{stadium}</h2>
        <div className="space-x-2">
          <button
            onClick={handlePreviousWeek}
            className="bg-gray-800 hover:bg-gray-700 text-white py-2 px-4 rounded-xl border border-gray-600 shadow-lg hover:scale-105"
          >
            ‚¨Ö
          </button>
          <button
            onClick={handleNextWeek}
            className="bg-gray-800 hover:bg-gray-700 text-white py-2 px-4 rounded-xl border border-gray-600 shadow-lg hover:scale-105"
          >
            ‚û°
          </button>
        </div>
      </div>

      {/* Days header */}
      <div className="grid grid-cols-8 text-center border-b border-gray-700 pb-4">
        <div></div>
        {currentWeekDates.map((date) => (
          <div key={date.format('YYYY-MM-DD')} className="text-sm font-bold text-gray-300">
            {date.format('ddd')}<br />
            <span className="text-red-500">{date.format('DD/MM')}</span>
          </div>
        ))}
      </div>

      {/* Time slots */}
      <div className="border rounded-2xl border-gray-700 p-4 bg-gradient-to-br from-black via-gray-900 to-black shadow-xl overflow-x-auto">
        {times.map((time) => (
          <div key={time} className="grid grid-cols-8 gap-1 mb-3">
            <div className="text-xs text-gray-500 py-3 text-center">{time}</div>
            {currentWeekDates.map((date) => {
              const dateStr = date.format('YYYY-MM-DD');
              const isBooked = bookedSlots[dateStr]?.includes(time);
              const isDisabled = dayjs(date).isBefore(dayjs(), 'day');

              return (
                <div
                  key={`${dateStr}-${time}`}
                  className={`rounded-xl py-3 text-center text-sm font-medium transition cursor-pointer border ${
                    isBooked
                      ? 'bg-red-800/70 text-white opacity-70 border-red-900'
                      : isDisabled
                      ? 'bg-gray-600 text-white opacity-50 cursor-not-allowed'
                      : 'bg-green-600 hover:bg-green-700 text-white hover:scale-[1.02] border-green-700 shadow-md'
                  }`}
                >
                  {isBooked ? 'R√©serv√©' : isDisabled ? 'Pass√©' : (
                    <button onClick={() => handleBooking(dateStr, time)}>
                      R√©server
                    </button>
                  )}
                </div>
              );
            })}
          </div>
        ))}
      </div>
    </div>
  );
};

// üéØ Main StadiumSelection component
const StadiumSelection = () => {
  const [selectedStadium, setSelectedStadium] = useState(null);
  const [currentImage, setCurrentImage] = useState(0);

  const handleSelectStadium = (stadiumName) => {
    setSelectedStadium(stadiums.find(s => s.name === stadiumName));
    setCurrentImage(0);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-black via-gray-900 to-black text-white py-12 px-4 md:px-8 pt-40">
      <div className="max-w-7xl mx-auto space-y-10">
        <h1 className="text-5xl font-extrabold text-red-500 tracking-tight mb-4 text-center">üìÖ Takwira</h1>
        <p className="text-gray-400 font-light text-md text-center mb-8">S√©lectionnez un stade pour r√©server votre cr√©neau.</p>

        <AnimatePresence mode="wait">
          {selectedStadium ? (
            <motion.div
              key="preview"
              className="space-y-8"
              initial={{ opacity: 0, x: 100 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: 100 }}
              transition={{ duration: 0.5 }}
            >
              {/* Stadium details */}
              <div className="w-full max-w-lg bg-black/70 backdrop-blur-lg rounded-3xl p-8 shadow-2xl border border-white/10 mx-auto">
                <h2 className="text-2xl font-bold mb-4 text-center text-white">D√©tails du stade</h2>
                <div className="relative w-full h-60 rounded-lg overflow-hidden shadow-lg">
                  <img src={selectedStadium.image} alt="Stadium" className="object-cover w-full h-full" />
                </div>
                <div className="mt-6 text-white">
                  <p className="text-lg font-semibold">Localisation: {selectedStadium.region}</p>
                  <p className="mt-2">{selectedStadium.description}</p>
                  <p className="mt-2">Capacit√©: {selectedStadium.capacity}</p>
                  <ul className="mt-2">
                    <li><strong>√âquipements:</strong></li>
                    {selectedStadium.features && selectedStadium.features.length > 0 ? (
                      selectedStadium.features.map((feature, idx) => (
                        <li key={idx} className="ml-4">- {feature}</li>
                      ))
                    ) : (
                      <li className="ml-4">Aucun √©quipement sp√©cifique mentionn√©</li>
                    )}
                  </ul>
                </div>

                <div className="flex flex-col space-y-4 mt-6">
                  <button
                    onClick={() => setSelectedStadium(null)}
                    className="bg-red-600 hover:bg-red-700 text-white py-2 px-4 rounded-xl transition transform hover:scale-105"
                  >
                    Choisir un autre stade
                  </button>
                </div>
              </div>

              {/* Calendar */}
              <Calendar stadium={selectedStadium.name} />
            </motion.div>
          ) : (
            <motion.div
              key="selection"
              className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-8"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.5 }}
            >
              {stadiums.map((stadium) => (
                <div
                  key={stadium.name}
                  className="border rounded-xl overflow-hidden shadow-lg cursor-pointer hover:border-red-500 hover:scale-105 transform transition duration-300"
                  onClick={() => handleSelectStadium(stadium.name)}
                >
                  <img
                    src={stadium.image}
                    alt={stadium.name}
                    className="w-full h-56 object-cover"
                  />
                  <div className="p-4 text-center">
                    <h3 className="text-lg font-semibold text-white">{stadium.name}</h3>
                    <p className="text-sm text-gray-400 mt-2">Cliquez pour s√©lectionner</p>
                  </div>
                </div>
              ))}
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </div>
  );
};

export default StadiumSelection;
